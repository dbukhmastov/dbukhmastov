/*
 *
 * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
 *
 */

package sqe.antext;

import sqe.antext.util.CustomProperties;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Task;

public class JadGenerator extends Task {
    private String MIDlet_Jar_URL = "unknown-Jar-URL";
    private String MIDlet_Jar_Size = "unknown-Jar-Size";
    private String destDir, resultFile;

    public static String JAD_FILE = "jad";
    public static String MANIFEST_FILE = "manifest";

    protected File propFile, globalPropFile, jarFile;
    protected CustomProperties globalProps;

    public void setResultFile(String resultFile) {
        this.resultFile = resultFile;
    }

    public void setType(String type) {
        if (type.equalsIgnoreCase("midlet")) {
            log("MIDlet type");
            MIDlet_Jar_URL = "MIDlet-Jar-URL";
            MIDlet_Jar_Size = "MIDlet-Jar-Size";
        } else if (type.equalsIgnoreCase("liblet")) {
            log("LIBlet type");
            MIDlet_Jar_URL = "LIBlet-Jar-URL";
            MIDlet_Jar_Size = "LIBlet-Jar-Size";
        }
    }

    public void setDestDir(String destDir) {
        if (destDir.equalsIgnoreCase(""))
            throw new BuildException("Need to set destdir properly");
        // Verify tailing '/'.
        if (destDir.endsWith("/")) {
            this.destDir = destDir;
        } else {
            this.destDir = destDir + "/";
        }
    }

    public void setPropertyFile(File file) {
        this.propFile = file;
    }

    public void setJarFile(File file) {
        jarFile = file;
    }

    public void setGlobalPropertyFile(File file) {
        globalPropFile = file;
    }

    public void execute() throws BuildException {
        if (propFile == null) {
            throw new BuildException("Need to set property folder location");
        }

        if (globalPropFile != null) {
            loadGloabalCustomProperties(globalPropFile);
        }
        generateFile(propFile, JAD_FILE);
    }

    void generateFile(File propFile, String type) {
        if (destDir == null && resultFile == null) {
            throw new BuildException("destDir should be set");
        }
        CustomProperties fileProps = getProps(loadLocalCustomProperties(propFile), type);
        String filename = getFullName(fileProps, type);
        File file = new File(filename);
        if (file.exists()) {
            file.delete();
        }
        try {
            if (!file.createNewFile()) {
                throw new BuildException("Can't create jad file" + file.getName());
            }
            FileOutputStream fos = new FileOutputStream(file);
            fileProps.store(fos, "Generated by JadGenerator");
        } catch (IOException ex) {
            Logger.getLogger(JadGenerator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void loadGloabalCustomProperties(File globalPropFile) {
        if (globalPropFile == null)
            throw new BuildException("Property file is required");

        globalProps = new CustomProperties();
        try {
            globalProps.load((new FileInputStream(globalPropFile)));
        } catch (IOException ex) {
            Logger.getLogger(JadGenerator.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Global itself can refer another value. For example, 'jarfile.name=${midlet.name}'
        // Then it will be evaluated to 'jarfile.name=real MIDlet name'.
        Enumeration<?> enumeration = globalProps.propertyNames();
        while (enumeration.hasMoreElements()) {
            String key = (String) enumeration.nextElement();
            String value = parseToRealValue(globalProps.getProperty(key), globalProps);
            globalProps.setProperty(key, value);
        }
    }

    CustomProperties loadLocalCustomProperties(File propFile) {
        CustomProperties props = new CustomProperties();
        try {
            props.load((new FileInputStream(propFile)));
        } catch (IOException ex) {
            Logger.getLogger(JadGenerator.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Fill value from Global props
        Enumeration<?> enumeration = props.propertyNames();
        while (enumeration.hasMoreElements()) {
            String key = (String) enumeration.nextElement();
            String value = parseToRealValue(props.getProperty(key), globalProps);
            props.setProperty(key, value);
        }
        // Fill values from itself finally.
        enumeration = props.propertyNames();
        while (enumeration.hasMoreElements()) {
            String key = (String) enumeration.nextElement();
            String value = parseToRealValue(props.getProperty(key), props);
            props.setProperty(key, value);
        }
        return props;
    }

    String parseToRealValue(String orgValue, CustomProperties props) {
        StringBuffer sb = new StringBuffer(orgValue);
        String modifiedString = orgValue;
        if (props != null) {
            Pattern pattern = Pattern.compile("\\$\\{(.*?)\\}");
            Matcher matcher = pattern.matcher(orgValue);
            if (matcher.find()) {
                if (props.getProperty(matcher.group(1)) != null) {
                    String newString = props.getProperty(matcher.group(1));
                    // log(matcher.group(0)+ "=>start:"+matcher.start()+", end:"+matcher.end());
                    modifiedString = parseToRealValue(sb.replace(matcher.start(), matcher.end(), newString).toString(), props);
                }
            }
        }
        return modifiedString;
    }

    String getFullName(CustomProperties props, String type) {
        String filename = null;
        if (resultFile != null) {
            filename = resultFile;
        } else {
            int lastIndexOfSlash = props.getProperty(MIDlet_Jar_URL).lastIndexOf("/");
            int lastIndexOfDotJar = props.getProperty(MIDlet_Jar_URL).toLowerCase().lastIndexOf(".jar");
            if (lastIndexOfSlash < 0) {
                filename = destDir + props.getProperty(MIDlet_Jar_URL).substring(0, lastIndexOfDotJar) + "." + type;
            } else {
                filename = destDir + props.getProperty(MIDlet_Jar_URL).substring(lastIndexOfSlash + 1, lastIndexOfDotJar) + "." + type;
            }
        }
        // MIDlet_Jar-URL is not required for Manifest
        if (type.equals(MANIFEST_FILE)) {
            props.remove(MIDlet_Jar_URL);
        }
        return filename;
    }

    CustomProperties getProps(CustomProperties props, String type) {
        CustomProperties resultProps = new CustomProperties();
        boolean skipSize = false;

        Enumeration<?> enumeration = props.propertyNames();
        while (enumeration.hasMoreElements()) {
            String key = (String) enumeration.nextElement();
            String value = props.getProperty(key);
            String types = key.substring(0, 2);
            String realKey = key.substring(key.indexOf("-") + 1);
            // log("realKey="+realKey);
            if (types.toLowerCase().contains("j") && type.equalsIgnoreCase(JAD_FILE)) {
                resultProps.setProperty(realKey, value);
            } else if (types.toLowerCase().contains("m") && type.equalsIgnoreCase(MANIFEST_FILE)) {
                resultProps.setProperty(realKey, value);
            } else
                if (types.toLowerCase().contains("j") && type.equalsIgnoreCase(MANIFEST_FILE) && realKey.equalsIgnoreCase(MIDlet_Jar_URL)) {
                // exceptional case. I need to collect MIDlet-Jar-URL for resuling manifest name.
                // it will be removed after getting name from manifest props.
                resultProps.setProperty(realKey, value);
            }

            if (realKey.equalsIgnoreCase(MIDlet_Jar_Size)) {
                // If someone define MIDlet(LIBLET)_Jar_Size, AntExt will not generate the jar file size property in the jad file.
                log("--- skip Jar Size ---");
                skipSize = true;
            }
        }
        if (type.equalsIgnoreCase(JAD_FILE) && !skipSize) {
            resultProps.setProperty(MIDlet_Jar_Size, "" + jarFile.length());
        }
        return resultProps;
    }
}
